#!/usr/bin/env python3

# desc# Standard interface to CodeStream's build process

# https://github.com/TeamCodeStream/teamcity_tools/blob/master/README.md#Structured_Builds

import os
import sys

sys.path.append(os.environ['DT_TOP'] + "/lib")
import sysUtils as su
import buildUtils

# 1. add filename extensions for all assets created (tgz, vsix, zip, ...)
assetExtensionList = ['vsix']

# 2. add any additional repos to be included (do not include primary repo)
additionalRepos = []

# 3. choose the build type (npm, intellijPlugin, custom)
buildType = buildUtils.buildType.npm

args = buildUtils.parseStandardBuildArgs()
buildOptions = {
	'verbose': args.verbose,
	'assetExtensionList': assetExtensionList,
	'additionalRepos': additionalRepos
}

# 4. Set this if you want your applied git tags to be something other than 'v' (v1.2.3)
buildOptions['gitTagPrefix'] = "vscode-"

if args.verbose:
	print("buildstep running with", args.action)

build = buildUtils.build(buildType, **buildOptions)
if not build:
	su.printErr("could not get a build object")
	exit(1)

# 5. Make sure the default actions apply, if not make changes as necessary.
#    Use 'build.execCmd("command string")' to execute custom actions.
#    https://github.com/TeamCodeStream/teamcity_tools/blob/master/README.project-build-types.md
if args.action == 'prep':
	build.prep()                              # set teamcity variables / parameters
elif args.action == 'build':
	# build.build()                             # complete build so services can be started
	build.execCmd("npm run bundle:ci")
elif args.action == 'citest':
	# build.citest()                            # run the continuous integration test suite
	print("there are no tests for this project")
elif args.action == 'pack':
	# build.pack()                              # create asset info file and package assets
	buildName = build.getDisplayVersion("name-version")          # codestream-1.2.3
	fullName = build.getDisplayVersion("full")                   # [prefix-]codestream-1.2.3+1000
	build.writeAssetInfo(assetInfoFileName=f"{buildName}.info")  # used by vsix to display version & build info
	build.execCmd("npm run pack")
	os.rename(f"{buildName}.vsix", f"{fullName}.vsix")
	os.unlink(f"{buildName}.info")
	build.getMD5SumsForAssets()
	build.writeAssetInfo()
elif args.action == 'publish':
	# build.publish()                           # publish assets for distribution
	print("there's nothing to publish")
elif args.action == 'tag':
	build.tag()                               # update version info and apply tags
elif args.action == 'release':
	# build.release()                           # release assets to the general public
	if os.path.exists(f"{os.environ['VSCSB_TMP']}/deployed.vscode-marketplace"):
		print(f"{os.environ['VSCSB_TMP']}/deployed.vscode-marketplace EXISTS. We already published to the VSC marketplace.")
	elif not su.someValueOrNone(os.environ, 'VSCSB_NOPUBLISH'):
		# BAD BAD BAD BAD
		build.execCmd("npm install --no-save")
		vsixFile = f"{build.getDisplayVersion('full')}.vsix"
		# build.execCmd("vscsb-publish-assets-to-cloudfront --no-prompt --asset-env prod")
		build.execCmd(f"vsce publish --packagePath {vsixFile}")
		build.execCmd(f"touch {os.environ['VSCSB_TMP']}/deployed.vscode-marketplace")
	else:
		su.printErr("VSCSB_NOPUBLISH is set - skipping this step")
elif args.action == 'release-openvsx':
	if not su.someValueOrNone(os.environ, 'VSCSB_NOPUBLISH'):
		publishToken = su.someValueOrNone(os.environ, 'OPENVSX_PUBLISH_TOKEN')
		if not publishToken:
			su.printErr("OPENVSX_PUBLISH_TOKEN not defined")
			exit(1)
		build.execCmd(f"npx ovsx create-namespace CodeStream -p {publishToken}")
		build.execCmd(f"npx ovsx publish {build.getDisplayVersion('full')}.vsix -p {publishToken}")
	else:
		su.printErr("VSCSB_NOPUBLISH is set - skipping this step")
elif args.action == 'update':
	build.update()                            # update existing asset to create a new one
elif args.action == 'docker':
	build.docker()                            # create docker containers
else:
	su.printErr("invalid build args")
	exit(1)

exit(0)
