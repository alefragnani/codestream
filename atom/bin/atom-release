#!/bin/bash

#desc# interactive atom release script

[ -z "$ATOM_TOP" ] && echo "atom sandbox not loaded" && exit 1

cd $ATOM_TOP || exit 1

. $DT_TOP/lib/parse_opts.sh || exit 1
parse_defaults \
	interactiveMode   '--yes|-y'             0  1  \
	sanityCheck       '--no-sanity-check'    0  1  \
	forceExec         '-f'                   1  0
parse_options "$@"
[ $forceExec -eq 0  -a  $sanityCheck -eq 1  -a  $interactiveMode -eq 1 ] && echo "usage: `basename $0`  -f | { [--yes] [--no-sanity-check] }" >&2 && exit 1

gitStatus=`git status -sb`
[ "$gitStatus" != "## master...origin/master" ] && echo "This does not appear to be a clean master branch" && exit 1

# verify / fetch current release
#    atom-client/package.json
#    atom marketplace (https://www.atom.io/api/packages/codestream)
#    change log
marketRelease=`get-json-property -j https://www.atom.io/api/packages/codestream -p releases.latest`
[ -z "$marketRelease" ] && echo "Could not get release from atom marketplace. Aborting" && exit 1

thisRelease=`get-json-property -j package.json -p version`
[ -z "$thisRelease" ] && echo "Could not determine release from package.json"

changeLogRelease=`dt-sb-changelog-tool --latest-version`

echo "
	marketRelease:      $marketRelease
	thisRelease:        $thisRelease
	changeLogRelease:   $changeLogRelease
"

[ "$changeLogRelease" != "$thisRelease" ] && echo "Latest ChangeLog entry does not match this release" >&2 && exit 1

if [ $interactiveMode -eq 1 ]; then
	echo -n "Go (y/N)? "; read ans
	[ "$ans" != "y" ] && echo "never mind" && exit 0
fi

echo "======== npm run bundle ========"
npm run bundle || exit 1

# This pushes up the new release but with the package.json version
# set to that of the existing release in the marketplace
echo "========= npm run pack -- $marketRelease --commit-and-push ==========="
npm run pack -- $marketRelease --commit-and-push || exit 1

if [ $sanityCheck -eq 1  -a  -d /Applications/Atom.app ]; then
	echo "Sanity check...."

	if [ -f ~/.atom/packages/codestream/package.json ]; then
		(cd ../../atom-client && apm uninstall codestream) || exit 1
	fi

	# This installs atom-client from what we pushed up previously
	echo apm install --no-save --production teamcodestream/atom-client
	apm install --no-save --production teamcodestream/atom-client || exit 1

	echo "Santity check..."
	open /Applications/Atom.app
	echo -n "Press ENTER to continue" && read

elif [ $sanityCheck -eq 1 ]; then
	echo "Atom does not to be installed on this machine"
	echo -n "Press ENTER to continue" && read
fi

echo -e "\napm publish $thisRelease"
(cd $ATOM_SANDBOX/atom-client && apm publish $thisRelease && git push origin master) || exit 1

tag="atom-$thisRelease"
echo -e "\nApplying tag $tag to the codestream repo..."
git tag $tag && git push origin $tag

echo -e "\nBumping atom's patch version on develop..."
tmpDir=/tmp/bumpver$$
mkdir $tmpDir || exit 1
(
	echo "clone codestream repo into $tmpDir"
	cd $tmpDir
	echo git clone  --depth 1 --branch develop git@github.com:teamcodestream/codestream.git
	git clone  --depth 1 --branch develop git@github.com:teamcodestream/codestream.git || exit 1
	cd codestream/atom || exit 1
	echo dt-sb-version-tool --bump-version patch
	dt-sb-version-tool --bump-version patch || exit 1
	nextVersion=`dt-sb-version-tool --report-version`
	[ -z "$nextVersion" -o "$nextVersion" == "$thisRelease" ] && echo "Uh oh!! Was the version updated properly?" && exit 1
	echo "nextVersion = $nextVersion"
	git commit -am "Auto-bump of Atom version to $nextVersion" || exit 1
	git push origin develop || exit 1
)
/bin/rm -rf $tmpDir

dt-notify-ops -m ":atom_symbol: = :rocket:" -w release

exit 0
